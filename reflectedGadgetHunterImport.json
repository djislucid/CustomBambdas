{
    "bambda":{
        "http_history_display_filter":{
            "bambda":"if (!requestResponse.hasResponse()) {\r\n\treturn false;\r\n}\r\n\r\nvar canaryString = \"ElectricYellow\";\r\n\r\nvar response = requestResponse.response();\r\n\r\n// Annotation builders\r\nStringBuilder noteBuilder = new StringBuilder();\r\nHighlightColor highlightColor = null;\r\n\r\n// Highlight in red if our canary was found in the Location header\r\nvar locationHeaderValue = response.headerValue(\"Location\");\r\nif (locationHeaderValue != null && locationHeaderValue.toLowerCase().contains(canaryString.toLowerCase())) {\r\n\thighlightColor = HighlightColor.RED;\r\n\tnoteBuilder.append(\"Location header contains canary: \").append(locationHeaderValue).append(\"\\n\");\r\n}\r\n\r\n// Highlight in pink if any other headers contain the canary\r\nfor (var header : response.headers()) {\r\n\tif (!header.name().equalsIgnoreCase(\"Location\") && header.value().toLowerCase().contains(canaryString.toLowerCase())) {\r\n\t\t// Make sure we don't overwrite any RED headers if they contain other headers with the same value\r\n\t\tif (highlightColor != HighlightColor.RED) {\r\n\t\t\thighlightColor = HighlightColor.PINK;\r\n\t\t}\r\n\t\tnoteBuilder.append(\"Header '\").append(header.name()).append(\"' contains the canary: \").append(header.value()).append(\"\\n\");\r\n\t}\r\n}\r\n\r\n// Highlight in green if the canary was reflected in the response body\r\nvar responseBody = response.bodyToString().trim();\r\nif (responseBody != null && responseBody.toLowerCase().contains(canaryString.toLowerCase())) {\r\n\thighlightColor = HighlightColor.GREEN;\r\n\tnoteBuilder.append(\"Response body contains the canary: \").append(canaryString);\r\n}\r\n\r\n// Apply the annotations\r\nif (highlightColor != null) {\r\n\trequestResponse.annotations().setHighlightColor(highlightColor);\r\n\trequestResponse.annotations().setNotes(noteBuilder.toString());\r\n}\r\n\r\n// Change to false if you just want to filter non-matches\r\nreturn true;"
        }
    }
}