{
    "bambda":{
        "http_history_display_filter":{
            "bambda":"/**\r\n* Highlights entries in the HTTP history based on the presence of specific headers.\r\n* Adds comments indicating which headers were discovered in requests and responses.\r\n* Code inspired by: https://github.com/flamebarke/SkittlesBambda\r\n**/\r\n\r\n// Define a vulnerable parameter group record\r\nrecord VulnParamGroup(String title, HighlightColor color, String... parameterNames) {}\r\n\r\n// Define the header group for filtering\r\n// Comment this line and uncomment the one below for different headers\r\nVulnParamGroup xheaders = new VulnParamGroup(\"XHEAD\", HighlightColor.MAGENTA,\r\n    \"activity-id\", \"correlation-token\", \"interactionid\", \"request-context-id\", \"request-id\",\r\n    \"service-transaction-id\", \"trace-context\", \"traceparent\", \"tracestate\", \"x-api-request-id\",\r\n    \"x-activity-id\", \"x-activity-trace-id\", \"x-amzn-trace-id\", \"x-b3-flags\", \"x-b3-parentspanid\",\r\n    \"x-b3-sampled\", \"x-b3-spanid\", \"x-b3-traceid\", \"x-client-request-id\",\r\n    \"x-correlation-context\", \"x-correlation-id\", \"x-correlationid\", \"x-debug-id\", \"x-flow-id\",\r\n    \"x-forwarded-request-id\", \"x-invocation-id\", \"x-operation-id\", \"x-request-chain-id\",\r\n    \"x-request-context\", \"x-request-id\", \"x-requestid\", \"x-session-id\", \"x-span-id\",\r\n    \"x-trace-id\", \"x-transaction-id\", \"x-unique-id\", \"x-workflow-id\"\r\n);\r\n// VulnParamGroup xheaders = new VulnParamGroup(\"XHEAD\", HighlightColor.MAGENTA, \"\");\r\n\r\n// Toggle for highlighting\r\nboolean highlightEnabled = true;\r\n\r\n// Convert the list of headers to lowercase for easier matching\r\nSet<String> headerSet = new HashSet<>();\r\nfor (String header : xheaders.parameterNames()) {\r\n    headerSet.add(header.toLowerCase());\r\n}\r\n\r\nvar request = requestResponse.request();\r\nvar response = requestResponse.response();\r\n\r\nSet<String> foundHeadersRequest = new HashSet<>();\r\nSet<String> foundHeadersResponse = new HashSet<>();\r\n\r\nfor (var header : request.headers()) {\r\n    String headerName = header.name().toLowerCase();\r\n    if (headerSet.contains(headerName)) {\r\n        foundHeadersRequest.add(header.name());\r\n    }\r\n}\r\n\r\nif (response != null) {\r\n    for (var header : response.headers()) {\r\n        String headerName = header.name().toLowerCase();\r\n        if (headerSet.contains(headerName)) {\r\n            foundHeadersResponse.add(header.name());\r\n        }\r\n    }\r\n}\r\n\r\nHighlightColor highlightColor = null;\r\nStringBuilder noteBuilder = new StringBuilder();\r\n\r\nif (!foundHeadersRequest.isEmpty() && !foundHeadersResponse.isEmpty()) {\r\n    // headers in both request and response\r\n    highlightColor = HighlightColor.MAGENTA;\r\n    noteBuilder.append(\"Headers in Request: \").append(String.join(\", \", foundHeadersRequest));\r\n    noteBuilder.append(\" | Headers in Response: \").append(String.join(\", \", foundHeadersResponse));\r\n} else if (!foundHeadersRequest.isEmpty()) {\r\n    // Headers only in request\r\n    highlightColor = HighlightColor.BLUE;\r\n    noteBuilder.append(\"Headers in Request: \").append(String.join(\", \", foundHeadersRequest));\r\n} else if (!foundHeadersResponse.isEmpty()) {\r\n    // Headers only in response\r\n    highlightColor = HighlightColor.ORANGE;\r\n    noteBuilder.append(\"Headers in Response: \").append(String.join(\", \", foundHeadersResponse));\r\n}\r\n\r\nif (highlightEnabled && highlightColor != null) {\r\n    requestResponse.annotations().setHighlightColor(highlightColor);\r\n\r\n    // Add a note if headers were found\r\n    if (noteBuilder.length() > 0) {\r\n        requestResponse.annotations().setNotes(noteBuilder.toString());\r\n    }\r\n}\r\n\r\nreturn true;"
        }
    }
}